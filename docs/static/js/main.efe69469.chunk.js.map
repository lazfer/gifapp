{"version":3,"sources":["componentes/AddCategory.js","helpers/getGifs.js","componentes/GifItem.js","componentes/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setpers","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","category","className","type","value","onChange","target","getGifs","a","urlBase","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","img","images","downsized_medium","url","GifItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","pers","ReactDOM","render","document","getElementById"],"mappings":"qLAgCeA,EA9BK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAEDC,mBAAS,KAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAcjC,OACI,sBAAMC,SATO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAS,SAAAS,GAAQ,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,MAKd,SACA,uBACAO,UAAU,YACVC,KAAK,OACLC,MAAQV,EACRW,SAjBY,SAACR,GACjBF,EAAcE,EAAES,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAON,GAAP,uBAAAO,EAAA,4DACP,mCACE,KACRC,EAHa,iDAGuCC,UAAUT,GAHjD,kBAEL,KAFK,oBACP,oCADO,SAKAU,MAAMF,GALN,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAQ,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBC,QAXtB,kBAeZR,GAfY,4CAAH,sDCYLS,EAVC,SAAC,GAAqB,IAApBL,EAAmB,EAAnBA,MAAWC,GAAQ,EAAZF,GAAY,EAARE,KACzB,OACI,sBAAKlB,UAAU,yCAAf,UACH,qBAAKuB,IAAKL,EAAKD,MAAOA,EAAOO,IAAI,WACjC,kCAAMP,SCgBIQ,EAnBC,SAAC,GAAoB,IAAjB1B,EAAgB,EAAhBA,SAAgB,ECAR,SAAEA,GAAe,IAAD,EAElBR,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAJ+B,mBAErCC,EAFqC,KAE9BC,EAF8B,KAqB5C,OAdAC,qBAAY,WAGRxB,EAAQN,GACR+B,MAAK,SAAAC,GACJH,EAAU,CACNhB,KAAMmB,EACNL,SAAS,SAIf,IAGIC,EDnB2BK,CAAcjC,GAAhCgC,EAFoB,EAEzBnB,KAAWc,EAFc,EAEdA,QAElB,OACI,qCACA,mCAAM3B,EAAN,OACA,sBAAKC,UAAU,YAAf,UACC0B,GAAW,wCAERK,EAAKjB,KAAK,SAAAI,GAAG,OACT,cAAC,EAAD,eACIA,GADUA,EAAIF,cEenBiB,EAzBM,WACjB,IADuB,EAEC1C,mBADH,CAAC,SADC,mBAEhB2C,EAFgB,KAEV5C,EAFU,KASvB,OACI,gCACA,kDAEJ,cAAC,EAAD,CAAaA,QAASA,IAClB,6BAEE4C,EAAKpB,KAAK,SAACf,GACd,OAAQ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChB7BoC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.efe69469.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nconst AddCategory = ({ setpers }) => {\n\nconst [inputValue, setinputValue] = useState(' ');\nconst handleInput = (e) => {\n    setinputValue(e.target.value);\n}\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2 ){\n        setpers( category => [inputValue, ...category]);\n        setinputValue('');\n    }\n   \n}\n    return (\n        <form onSubmit={handleSubmit}>\n        <input \n        className=\"input-img\"\n        type=\"text\"\n        value= {inputValue}\n        onChange={handleInput}/>\n        </form>\n    );\n\n}\n\nAddCategory.propTypes = {\n    setpers: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","export const getGifs = async( category ) => {\n    const key = 'BAlJP3cL8X15nkPxhvgZgCahtFDFvT65';\n    const limit = '10';\n    const urlBase = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=${key}`;\n\n    const resp = await fetch(urlBase);\n    const { data } = await resp.json();\n    const gifs = data.map( gif => {\n       return  {\n           id: gif.id,\n           title: gif.title,\n           img: gif.images?.downsized_medium.url\n       }\n    });\n  \n    return gifs;\n\n}","import React from 'react';\n\nconst GifItem = ({title, id, img}) =>{\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n     <img src={img} title={title} alt=\"imagen\" />\n     <p> { title }</p>\n     </div>\n        )\n\n}\n\nexport default GifItem;","import React, {useEffect, useState} from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport  GifItem from './GifItem';\nconst GifGrid = ( { category } ) => {\n\n   const { data:imgs, loading } = useFetchGifs (category);\n// {...img} pasa los valore del objeto img\n    return (\n        <>\n        <h2> {category} </h2>\n        <div className=\"card-grid\">\n        {loading && <p>Loading</p>}\n        {\n            imgs.map( img => (\n                <GifItem key={img.id}\n                {...img} />))\n        }\n        </div>\n        </>\n    );\n}\n\nexport default GifGrid;","import {useState, useEffect} from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\nconst [state, setstate] = useState({\n    data: [],\n    loading: true\n})\n\nuseEffect ( () =>{\n    //Obtenemos el resultado del helper que consume la api\n    // sobre escribimos state con la funcion setstate\n    getGifs(category).\n    then(imgs => {\n     setstate( {\n         data: imgs,\n         loading: false\n     });\n\n    })\n}, []);\n\n// state regresa lo del setstate\nreturn state\n\n}","\nimport React, {useState} from 'react';\nimport AddCategory from './componentes/AddCategory';\nimport GifGrid from './componentes/GifGrid';\nconst GifExpertApp = () => {\n    const arrPersonaje = ['Goku'];\n    const [pers, setpers] = useState(arrPersonaje)\n   \n    /* const handleAdd = () => {\n         setpers(persona => [...persona, 'doremon']);\n    }*/\n\n\n    return (\n        <div>\n        <h2> Gif Expert App </h2>\n    {/*  <button onClick={handleAdd}> Agregar </button> */}\n    <AddCategory setpers={setpers}/>\n        <ol>\n        {\n          pers.map( (category) => {\n       return  <GifGrid key={category} category={category}/>\n          })\n        }\n        </ol>\n        </div>\n        )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}